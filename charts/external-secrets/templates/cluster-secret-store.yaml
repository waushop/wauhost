{{- if and .Values.clusterSecretStore.enabled .Values.secretStore.provider }}
---
apiVersion: external-secrets.io/v1
kind: ClusterSecretStore
metadata:
  name: {{ include "external-secrets.clusterSecretStoreName" . }}
  labels:
    {{- include "external-secrets.labels" . | nindent 4 }}
spec:
  provider:
    {{- if eq .Values.secretStore.provider "aws" }}
    aws:
      service: SecretsManager
      region: {{ .Values.secretStore.region }}
      auth:
        secretRef:
          accessKeyID:
            name: {{ .Values.secretStore.auth.secretRef.accessKeyID.name }}
            key: {{ .Values.secretStore.auth.secretRef.accessKeyID.key }}
            namespace: {{ .Release.Namespace }}
          secretAccessKey:
            name: {{ .Values.secretStore.auth.secretRef.secretAccessKey.name }}
            key: {{ .Values.secretStore.auth.secretRef.secretAccessKey.key }}
            namespace: {{ .Release.Namespace }}
    {{- else if eq .Values.secretStore.provider "vault" }}
    vault:
      server: {{ .Values.secretStore.server | quote }}
      path: {{ .Values.secretStore.path | quote }}
      version: {{ .Values.secretStore.version | quote }}
      auth:
        {{- if .Values.secretStore.auth.kubernetes.enabled }}
        kubernetes:
          mountPath: {{ .Values.secretStore.auth.kubernetes.mountPath | default "kubernetes" }}
          role: {{ .Values.secretStore.auth.kubernetes.role | default "external-secrets" }}
          serviceAccountRef:
            name: {{ include "external-secrets.serviceAccountName" . }}
        {{- else }}
        tokenSecretRef:
          name: {{ .Values.secretStore.auth.tokenSecretRef.name }}
          key: {{ .Values.secretStore.auth.tokenSecretRef.key }}
          namespace: {{ .Release.Namespace }}
        {{- end }}
    {{- else if eq .Values.secretStore.provider "azurekv" }}
    azurekv:
      vaultUrl: {{ .Values.secretStore.vaultUrl | quote }}
      tenantId: {{ .Values.secretStore.tenantId | quote }}
      authSecretRef:
        clientId:
          name: {{ .Values.secretStore.auth.secretRef.clientId.name }}
          key: {{ .Values.secretStore.auth.secretRef.clientId.key }}
          namespace: {{ .Release.Namespace }}
        clientSecret:
          name: {{ .Values.secretStore.auth.secretRef.clientSecret.name }}
          key: {{ .Values.secretStore.auth.secretRef.clientSecret.key }}
          namespace: {{ .Release.Namespace }}
    {{- else if eq .Values.secretStore.provider "gcpsm" }}
    gcpsm:
      projectID: {{ .Values.secretStore.projectID | quote }}
      auth:
        secretRef:
          secretAccessKey:
            name: {{ .Values.secretStore.auth.secretRef.secretAccessKey.name }}
            key: {{ .Values.secretStore.auth.secretRef.secretAccessKey.key }}
            namespace: {{ .Release.Namespace }}
    {{- end }}
{{- end }}
